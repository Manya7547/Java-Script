Notes:

DOM - Document Object Model
It is a way for web browsers to structure and manage web pages. 
Think of it like a tree diagram that represents all the elements on a web page. 
Each part of the page (like headings, paragraphs, images, etc.) is a branch or a leaf on this tree.

Document: It is the whole web page 
Object: Each element on the web page (like paragraphs, images, buttons).
Model: A structured way to organize and interact with these elements.

When you open a web page, the browser creates a DOM for that page. 
This allows programmers to use languages like JavaScript to add, remove, or 
change parts of the web page dynamically without having to reload the whole page.

For example, if you click a button on a web page and a new paragraph appears, 
that's the DOM in action. The button click triggers JavaScript code that changes the DOM, 
which then updates what you see on the screen.

- we can do DOM manupulation in actual web pages 


************ Elements and Attributes ************

Element 
- defines the structure and content of the web page. 
- represented by tags in the HTML code and usually come in pairs: 
- an opening tag and a closing tag. Some elements, like <img>, are self-closing.

Attributes
- provide additional information about HTML elements. 
- They are included inside the opening tag of an element and typically come in name/value pairs, 
- separated by an equals sign.
- class = "xyz" id="title"


************ DOM manupulation ************

DOM selectors - getElementById, getElemenyByClassName, getElemenyByName, querySelector
1) getElementById 
- method used to access a specific element on a web page by its unique ID.
- used to manipulate or retrieve information from a particular element.
- we can store this in a const variable and do operations

const title = document.getElementById('title')
title.setAttribute()
title.className

document.getElementById('element id') - this gives the whole element with that id. 

document.getElementById('id').className - gives the class name of the element with that id 

document.getElementById('id').getAttribute('id') - gives the element's id 

document.getElementById('id').getAttribute('class') - gives the class name

document.getElementById('id').setAttribute('class', 'test') - changes the attribute value into test. Overwrite.   
document.getElementById('id').setAttribute('class', 'test heading') - changes the attribute value into test heading. not overwritted.   

- we can change style of an element 
title.style.backgroundColor = 'blue'
title.style.padding = "15px" 
title.style.borderRadius = "15px" - rounded corners


************ Taking out content from elements ************

<h1 class="heading" id="title">Learning DOM - Document Object Model </h1>

we know title = document.getElementById('title') which is the above line

By content we mean the text content on the web page
- title.textContent - gives Learning DOM - Document Object Model
- title.innerHTML - gives Learning DOM - Document Object Model
- title.innerText - gives Learning DOM - Document Object Model <span style="display: none;" > Test text</span>

what is the difference??
textContent: Includes all text content, regardless of CSS visibility.
innerText: Includes only visible text, ignoring hidden content.
innerHTML : will give the value of HTML - Learning DOM - Document Object Model <span style="display: none;" > Test text</span>


2) querySelector
- querySelector is a method in the DOM API that allows you to select elements from the DOM using CSS selectors. 
- it lets you use the same syntax you use in CSS to select elements in your JavaScript code.
- document.querySelector(selector)
- selectors can be class selectors, ID selectors, attribute selectors, pseudo-classes, and more.

document.querySelector('h1') - gives the first h1 element
document.querySelector('h2') - gives the first h2 element
document.querySelector('#title') - gives the element with id = title. id is denoted by using #
document.querySelector('.heading') - gives the element with class='heading'. class is denoted by using .
document.querySelector('ul') - selectig unordered list 

you can store it's value in a constant and select a nested element

const myUL = document.querySelector('ul')
myUL.querySelector('li')   - will  give the first list item 

this can be further stored in a variable and we can make changes in this particualr element 

const turnGreen = myUL.querySelector('li') 
turnGreen.style.padding = '10px';
turnGreen.style.backgroundColor = 'green';

If i want to select all the items in an unordered list:
document.querySelectorAll('li')  - this gives a node list (it is not an array)

In a nodeList we cannot use .style directly - we have to use forEach() loop to change each individual element 

const myList = document.querySelectorAll('li')
myList.forEach(function(l){
    l.style.backgroundColor = 'blue';
})

or 

myList.forEach((l)=>l.style.color='pink')   // arrow function 


3) getElementByClassName 

const myList = document.getElementByClassName('list-item') - returns an HTML collection

getElementBy... methods return HTML collections
HTML collections are dynamic - meaning it automatically updates to reflect changes in the DOM. 
If elements are added or removed from the document, the collection is updated automatically.

How to loop over an HTML collection? 
HTML collections has to be converted into an Array 

const convertedArray = Array.from(myList);

loop over using for each 
convertedList.forEach((li)=>li.style.color='orange')